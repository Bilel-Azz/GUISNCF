Index: src/main/java/org/example/demo/ui/ToolbarPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// ToolbarPanel.java\npackage org.example.demo.ui;\n\nimport org.example.demo.ui.components.PortConfigSelectorPanel;\nimport org.example.demo.ui.components.RoundRectBorder;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.util.function.Consumer;\n\npublic class ToolbarPanel extends JPanel {\n\n    public ToolbarPanel(Runnable onSendInit, Consumer<String> onTrameReceived,\n                        Runnable onMessageClick, Runnable onGraphClick, Runnable onFilterClick) {\n        setLayout(new BorderLayout());\n        setBackground(Color.WHITE);\n\n        JPanel leftPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));\n        leftPanel.setBackground(Color.WHITE);\n\n        JLabel logo = new JLabel(\"‚àû - ANALYSETRAM¬©\");\n        logo.setFont(new Font(\"Arial\", Font.BOLD, 14));\n        leftPanel.add(logo);\n\n        JButton graphiqueBtn = createToolbarButton(\"Graphique\", \"\uD83D\uDCC8\");\n        JButton messageBtn = createToolbarButton(\"Message\", \"\uD83D\uDCAC\");\n        JButton filtreBtn = createToolbarButton(\"Filtre\", \"\uD83D\uDD0D\");\n\n        graphiqueBtn.addActionListener(e -> onGraphClick.run());\n        messageBtn.addActionListener(e -> onMessageClick.run());\n        filtreBtn.addActionListener(e -> onFilterClick.run());\n\n        leftPanel.add(graphiqueBtn);\n        leftPanel.add(messageBtn);\n        leftPanel.add(filtreBtn);\n\n        JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));\n        rightPanel.setBackground(Color.WHITE);\n\n        JButton protocolBtn = createToolbarButton(\"Protocol\", \"‚ûï\");\n        rightPanel.add(protocolBtn);\n        protocolBtn.addActionListener(e -> {\n            JFrame parent = (JFrame) SwingUtilities.getWindowAncestor(this);\n            new org.example.demo.ui.dialogs.AddPortConfigDialog(parent).setVisible(true);\n        });\n\n        PortConfigSelectorPanel configSelector = new PortConfigSelectorPanel(\n                onSendInit,\n                onTrameReceived\n        );\n        rightPanel.add(configSelector);\n\n        add(leftPanel, BorderLayout.WEST);\n        add(rightPanel, BorderLayout.EAST);\n    }\n\n    private JButton createToolbarButton(String text, String icon) {\n        JButton button = new JButton(text + \" \" + icon);\n        button.setFocusPainted(false);\n        button.setBackground(Color.WHITE);\n        button.setBorder(BorderFactory.createCompoundBorder(\n                new RoundRectBorder(10),\n                BorderFactory.createEmptyBorder(5, 15, 5, 15)\n        ));\n        return button;\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/demo/ui/ToolbarPanel.java b/src/main/java/org/example/demo/ui/ToolbarPanel.java
--- a/src/main/java/org/example/demo/ui/ToolbarPanel.java	
+++ b/src/main/java/org/example/demo/ui/ToolbarPanel.java	
@@ -1,67 +1,222 @@
-// ToolbarPanel.java
 package org.example.demo.ui;
 
 import org.example.demo.ui.components.PortConfigSelectorPanel;
 import org.example.demo.ui.components.RoundRectBorder;
 
 import javax.swing.*;
+import javax.swing.border.*;
 import java.awt.*;
+import java.awt.event.*;
 import java.util.function.Consumer;
 
 public class ToolbarPanel extends JPanel {
+    // Couleurs coh√©rentes avec MainContentPanel
+    private static final Color BACKGROUND_COLOR = new Color(245, 245, 245);
+    private static final Color HEADER_COLOR = new Color(60, 63, 65);
+    private static final Color ACCENT_COLOR = new Color(78, 110, 142);
+    private static final Color BUTTON_HOVER_COLOR = new Color(230, 235, 240);
+    private static final Color BUTTON_ACTIVE_COLOR = new Color(220, 225, 230);
+
+    // Polices
+    private static final Font LOGO_FONT = new Font("Segoe UI", Font.BOLD, 16);
+    private static final Font BUTTON_FONT = new Font("Segoe UI", Font.PLAIN, 13);
+
+    // Boutons de navigation
+    private JButton graphiqueBtn;
+    private JButton messageBtn;
+    private JButton filtreBtn;
+
+    // √âtat actif
+    private JButton activeButton;
 
     public ToolbarPanel(Runnable onSendInit, Consumer<String> onTrameReceived,
                         Runnable onMessageClick, Runnable onGraphClick, Runnable onFilterClick) {
         setLayout(new BorderLayout());
-        setBackground(Color.WHITE);
+        setBackground(BACKGROUND_COLOR);
+        setBorder(new CompoundBorder(
+                new MatteBorder(0, 0, 1, 0, new Color(220, 220, 220)),
+                new EmptyBorder(8, 15, 8, 15)
+        ));
 
-        JPanel leftPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 10, 5));
-        leftPanel.setBackground(Color.WHITE);
+        // Panel gauche avec logo et boutons de navigation
+        JPanel leftPanel = new JPanel();
+        leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.X_AXIS));
+        leftPanel.setBackground(BACKGROUND_COLOR);
+        leftPanel.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
 
-        JLabel logo = new JLabel("‚àû - ANALYSETRAM¬©");
-        logo.setFont(new Font("Arial", Font.BOLD, 14));
+        // Logo avec style am√©lior√©
+        JLabel logo = new JLabel("‚àû ANALYSETRAM¬©");
+        logo.setFont(LOGO_FONT);
+        logo.setForeground(HEADER_COLOR);
+        logo.setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 25));
         leftPanel.add(logo);
 
-        JButton graphiqueBtn = createToolbarButton("Graphique", "üìà");
-        JButton messageBtn = createToolbarButton("Message", "üí¨");
-        JButton filtreBtn = createToolbarButton("Filtre", "üîç");
+        // S√©parateur vertical
+        JSeparator separator = new JSeparator(JSeparator.VERTICAL);
+        separator.setPreferredSize(new Dimension(1, 24));
+        separator.setMaximumSize(new Dimension(1, 24));
+        separator.setForeground(new Color(220, 220, 220));
+        leftPanel.add(separator);
+        leftPanel.add(Box.createRigidArea(new Dimension(20, 0)));
+
+        // Boutons de navigation avec style am√©lior√©
+        graphiqueBtn = createToolbarButton("Graphique", "üìà");
+        messageBtn = createToolbarButton("Message", "üí¨");
+        filtreBtn = createToolbarButton("Filtre", "üîç");
+
+        // Ajouter des √©couteurs d'√©v√©nements
+        graphiqueBtn.addActionListener(e -> {
+            setActiveButton(graphiqueBtn);
+            onGraphClick.run();
+        });
+
+        messageBtn.addActionListener(e -> {
+            setActiveButton(messageBtn);
+            onMessageClick.run();
+        });
 
-        graphiqueBtn.addActionListener(e -> onGraphClick.run());
-        messageBtn.addActionListener(e -> onMessageClick.run());
-        filtreBtn.addActionListener(e -> onFilterClick.run());
+        filtreBtn.addActionListener(e -> {
+            setActiveButton(filtreBtn);
+            onFilterClick.run();
+        });
+
+        // Ajouter des tooltips
+        graphiqueBtn.setToolTipText("Afficher la vue graphique");
+        messageBtn.setToolTipText("Afficher la vue message");
+        filtreBtn.setToolTipText("Ouvrir les options de filtrage");
 
         leftPanel.add(graphiqueBtn);
+        leftPanel.add(Box.createRigidArea(new Dimension(5, 0)));
         leftPanel.add(messageBtn);
+        leftPanel.add(Box.createRigidArea(new Dimension(5, 0)));
         leftPanel.add(filtreBtn);
 
-        JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
-        rightPanel.setBackground(Color.WHITE);
+        // Panel droit avec bouton de protocole et s√©lecteur de configuration
+        JPanel rightPanel = new JPanel();
+        rightPanel.setLayout(new BoxLayout(rightPanel, BoxLayout.X_AXIS));
+        rightPanel.setBackground(BACKGROUND_COLOR);
 
-        JButton protocolBtn = createToolbarButton("Protocol", "‚ûï");
-        rightPanel.add(protocolBtn);
+        // Bouton de protocole am√©lior√©
+        JButton protocolBtn = createActionButton("Ajouter Protocol", "‚ûï");
+        protocolBtn.setToolTipText("Ajouter une nouvelle configuration de port");
+
         protocolBtn.addActionListener(e -> {
             JFrame parent = (JFrame) SwingUtilities.getWindowAncestor(this);
             new org.example.demo.ui.dialogs.AddPortConfigDialog(parent).setVisible(true);
         });
 
+        // S√©lecteur de configuration de port avec style am√©lior√©
         PortConfigSelectorPanel configSelector = new PortConfigSelectorPanel(
                 onSendInit,
                 onTrameReceived
         );
+        configSelector.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 0));
+
+        rightPanel.add(Box.createHorizontalGlue());
+        rightPanel.add(protocolBtn);
+        rightPanel.add(Box.createRigidArea(new Dimension(15, 0)));
         rightPanel.add(configSelector);
 
         add(leftPanel, BorderLayout.WEST);
         add(rightPanel, BorderLayout.EAST);
+
+        // D√©finir le bouton Message comme actif par d√©faut
+        setActiveButton(messageBtn);
     }
 
+    /**
+     * Cr√©e un bouton de navigation pour la barre d'outils
+     */
     private JButton createToolbarButton(String text, String icon) {
         JButton button = new JButton(text + " " + icon);
+        button.setFont(BUTTON_FONT);
         button.setFocusPainted(false);
-        button.setBackground(Color.WHITE);
+        button.setBorderPainted(false);
+        button.setContentAreaFilled(false);
+        button.setOpaque(true);
+        button.setBackground(BACKGROUND_COLOR);
+        button.setForeground(HEADER_COLOR);
+        button.setBorder(BorderFactory.createEmptyBorder(6, 12, 6, 12));
+
+        // Ajouter des effets de survol
+        button.addMouseListener(new MouseAdapter() {
+            @Override
+            public void mouseEntered(MouseEvent e) {
+                if (button != activeButton) {
+                    button.setBackground(BUTTON_HOVER_COLOR);
+                }
+            }
+
+            @Override
+            public void mouseExited(MouseEvent e) {
+                if (button != activeButton) {
+                    button.setBackground(BACKGROUND_COLOR);
+                }
+            }
+        });
+
+        return button;
+    }
+
+    /**
+     * Cr√©e un bouton d'action (comme le bouton Protocol)
+     */
+    private JButton createActionButton(String text, String icon) {
+        JButton button = new JButton(text + " " + icon);
+        button.setFont(BUTTON_FONT);
+        button.setFocusPainted(false);
+        button.setBackground(ACCENT_COLOR);
+        button.setForeground(Color.WHITE);
         button.setBorder(BorderFactory.createCompoundBorder(
-                new RoundRectBorder(10),
-                BorderFactory.createEmptyBorder(5, 15, 5, 15)
+                new RoundRectBorder(6, ACCENT_COLOR),
+                BorderFactory.createEmptyBorder(6, 12, 6, 12)
         ));
+
+        // Ajouter des effets de survol
+        button.addMouseListener(new MouseAdapter() {
+            @Override
+            public void mouseEntered(MouseEvent e) {
+                button.setBackground(ACCENT_COLOR.darker());
+                button.setBorder(BorderFactory.createCompoundBorder(
+                        new RoundRectBorder(6, ACCENT_COLOR.darker()),
+                        BorderFactory.createEmptyBorder(6, 12, 6, 12)
+                ));
+            }
+
+            @Override
+            public void mouseExited(MouseEvent e) {
+                button.setBackground(ACCENT_COLOR);
+                button.setBorder(BorderFactory.createCompoundBorder(
+                        new RoundRectBorder(6, ACCENT_COLOR),
+                        BorderFactory.createEmptyBorder(6, 12, 6, 12)
+                ));
+            }
+        });
+
         return button;
     }
+
+    /**
+     * D√©finit le bouton actif et met √† jour l'interface en cons√©quence
+     */
+    private void setActiveButton(JButton button) {
+        // R√©initialiser l'ancien bouton actif
+        if (activeButton != null) {
+            activeButton.setBackground(BACKGROUND_COLOR);
+            activeButton.setForeground(HEADER_COLOR);
+            activeButton.setBorderPainted(false);
+        }
+
+        // D√©finir le nouveau bouton actif
+        activeButton = button;
+        activeButton.setBackground(BUTTON_ACTIVE_COLOR);
+        activeButton.setForeground(ACCENT_COLOR);
+
+        // Ajouter une bordure inf√©rieure pour indiquer le bouton actif
+        activeButton.setBorder(BorderFactory.createCompoundBorder(
+                BorderFactory.createMatteBorder(0, 0, 2, 0, ACCENT_COLOR),
+                BorderFactory.createEmptyBorder(6, 12, 4, 12)
+        ));
+        activeButton.setBorderPainted(true);
+    }
 }
\ No newline at end of file
Index: src/main/java/org/example/demo/ui/components/RoundRectBorder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.demo.ui.components;\n\nimport javax.swing.border.AbstractBorder;\nimport java.awt.*;\n\npublic class RoundRectBorder extends AbstractBorder {\n    private final int radius;\n\n    public RoundRectBorder(int radius) {\n        this.radius = radius;\n    }\n\n    @Override\n    public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {\n        Graphics2D g2 = (Graphics2D) g.create();\n        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n        g2.setColor(Color.LIGHT_GRAY);\n        g2.drawRoundRect(x, y, width - 1, height - 1, radius, radius);\n        g2.dispose();\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/demo/ui/components/RoundRectBorder.java b/src/main/java/org/example/demo/ui/components/RoundRectBorder.java
--- a/src/main/java/org/example/demo/ui/components/RoundRectBorder.java	
+++ b/src/main/java/org/example/demo/ui/components/RoundRectBorder.java	
@@ -5,16 +5,21 @@
 
 public class RoundRectBorder extends AbstractBorder {
     private final int radius;
+    private final Color color;
 
     public RoundRectBorder(int radius) {
+        this(radius, Color.LIGHT_GRAY);
+    }
+
+    public RoundRectBorder(int radius, Color color) {
         this.radius = radius;
+        this.color = color;
     }
 
     @Override
     public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
         Graphics2D g2 = (Graphics2D) g.create();
-        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
-        g2.setColor(Color.LIGHT_GRAY);
+        g2.setColor(color);
         g2.drawRoundRect(x, y, width - 1, height - 1, radius, radius);
         g2.dispose();
     }
Index: src/main/java/org/example/demo/ui/components/PortConfigSelectorPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// PortConfigSelectorPanel.java\npackage org.example.demo.ui.components;\n\nimport com.fazecast.jSerialComm.SerialPort;\nimport org.example.demo.serial.SerialTransmitter;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.sql.*;\nimport java.util.List;\nimport java.util.function.Consumer;\n\npublic class PortConfigSelectorPanel extends JPanel {\n    private JButton dropdownButton;\n    private JButton sendButton;\n    private JButton listenButton;\n    private JPopupMenu dropdownMenu;\n    private int selectedConfigId = -1;\n    private String selectedConfigLabel = \"\";\n    private JComboBox<String> portSelector;\n\n    private boolean listening = false;\n    private Thread listenThread;\n\n    private final Consumer<String> onTrameReceived;\n\n    public PortConfigSelectorPanel(Runnable onSendInit, Consumer<String> onTrameReceived) {\n        this.onTrameReceived = onTrameReceived;\n        setLayout(new FlowLayout(FlowLayout.LEFT, 5, 0));\n        setBackground(Color.WHITE);\n\n        dropdownButton = new JButton(\"Configuration Port ‚ñº\");\n        dropdownButton.setFocusPainted(false);\n        dropdownButton.setBackground(new Color(245, 245, 245));\n        dropdownButton.setBorder(BorderFactory.createCompoundBorder(\n                new RoundRectBorder(10),\n                BorderFactory.createEmptyBorder(5, 12, 5, 12)\n        ));\n\n        sendButton = new JButton(\"Envoyer la config\");\n        sendButton.setFocusPainted(false);\n        sendButton.setBackground(new Color(220, 245, 255));\n        sendButton.setBorder(BorderFactory.createCompoundBorder(\n                new RoundRectBorder(10),\n                BorderFactory.createEmptyBorder(5, 10, 5, 10)\n        ));\n\n        listenButton = new JButton(\"‚ñ∂ √âcouter\");\n        listenButton.setFocusPainted(false);\n        listenButton.setBackground(new Color(230, 250, 230));\n        listenButton.setBorder(BorderFactory.createCompoundBorder(\n                new RoundRectBorder(10),\n                BorderFactory.createEmptyBorder(5, 10, 5, 10)\n        ));\n\n        portSelector = new JComboBox<>();\n        portSelector.setPreferredSize(new Dimension(120, 25));\n        refreshSerialPorts();\n\n        dropdownMenu = new JPopupMenu();\n        dropdownMenu.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));\n\n        dropdownButton.addActionListener(e -> dropdownMenu.show(dropdownButton, 0, dropdownButton.getHeight()));\n\n        sendButton.addActionListener(e -> {\n            if (selectedConfigId == -1) {\n                JOptionPane.showMessageDialog(this, \"Veuillez d'abord s√©lectionner une configuration.\");\n                return;\n            }\n            String portName = (String) portSelector.getSelectedItem();\n            if (portName == null) {\n                JOptionPane.showMessageDialog(this, \"Aucun port s√©rie s√©lectionn√©.\");\n                return;\n            }\n            List<String> configLines = getConfigLinesById(selectedConfigId);\n\n            if (SerialTransmitter.isSimulationMode()) {\n                // Ne rien faire ici ‚Äî la simulation ne d√©marre que sur √©coute\n                JOptionPane.showMessageDialog(this, \"Configuration simul√©e pr√™te. Appuyez sur ‚ñ∂ pour d√©marrer.\");\n            } else {\n                SerialTransmitter.sendConfigOnly(portName, 115200, configLines);\n            }\n        });\n\n        listenButton.addActionListener(e -> toggleListening());\n\n        add(dropdownButton);\n        add(portSelector);\n        add(sendButton);\n        add(listenButton);\n        reloadConfigs();\n    }\n\n    private void toggleListening() {\n        if (listening) {\n            SerialTransmitter.stopListening();\n            listening = false;\n            listenButton.setText(\"‚ñ∂ √âcouter\");\n        } else {\n            if (selectedConfigId == -1) {\n                JOptionPane.showMessageDialog(this, \"Veuillez d'abord s√©lectionner une configuration.\");\n                return;\n            }\n            String portName = (String) portSelector.getSelectedItem();\n            if (portName == null) {\n                JOptionPane.showMessageDialog(this, \"Aucun port s√©rie s√©lectionn√©.\");\n                return;\n            }\n            List<String> configLines = getConfigLinesById(selectedConfigId);\n            listening = true;\n            listenButton.setText(\"‚è∏ Pause\");\n            listenThread = new Thread(() ->\n                    SerialTransmitter.sendConfigAndListen(portName, 115200, configLines, onTrameReceived, false)\n            );\n            listenThread.start();\n        }\n    }\n\n    private void refreshSerialPorts() {\n        portSelector.removeAllItems();\n        for (SerialPort port : SerialPort.getCommPorts()) {\n            portSelector.addItem(port.getSystemPortName());\n        }\n    }\n\n    public void reloadConfigs() {\n        dropdownMenu.removeAll();\n\n        try (Connection conn = DriverManager.getConnection(\"jdbc:sqlite:bdd.db\")) {\n            String query = \"SELECT * FROM port_config\";\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(query);\n\n            while (rs.next()) {\n                int id = rs.getInt(\"id\");\n                int baudrate = rs.getInt(\"baudrate\");\n                String parity = rs.getString(\"parity\");\n                int databits = rs.getInt(\"databits\");\n                int stopbits = rs.getInt(\"stopbits\");\n\n                String label = String.format(\"Config %d : %d - %s - %d/%d\", id, baudrate, parity, databits, stopbits);\n\n                JMenu configItem = new JMenu(label);\n                configItem.setFont(new Font(\"SansSerif\", Font.PLAIN, 13));\n                configItem.setIcon(null);\n\n                JMenuItem selectItem = new JMenuItem(\"‚úÖ S√©lectionner\");\n                selectItem.setIcon(null);\n                selectItem.addActionListener(e -> {\n                    selectedConfigId = id;\n                    selectedConfigLabel = label;\n                    dropdownButton.setText(label + \" ‚ñº\");\n                    System.out.println(\"S√©lectionn√© : \" + label);\n                });\n\n                JMenuItem editItem = new JMenuItem(\"‚úè\uFE0F Modifier\");\n                editItem.setIcon(null);\n                editItem.addActionListener(e -> {\n                    JFrame parent = (JFrame) SwingUtilities.getWindowAncestor(this);\n                    new org.example.demo.ui.dialogs.EditPortConfigDialog(parent, id).setVisible(true);\n                    reloadConfigs();\n                });\n\n                JMenuItem deleteItem = new JMenuItem(\"\uD83D\uDDD1\uFE0F Supprimer\");\n                deleteItem.setIcon(null);\n                deleteItem.addActionListener(e -> {\n                    int confirm = JOptionPane.showConfirmDialog(this,\n                            \"Supprimer cette configuration ?\", \"Confirmation\", JOptionPane.YES_NO_OPTION);\n                    if (confirm == JOptionPane.YES_OPTION) {\n                        try (PreparedStatement ps = conn.prepareStatement(\"DELETE FROM port_config WHERE id = ?\")) {\n                            ps.setInt(1, id);\n                            ps.executeUpdate();\n                            reloadConfigs();\n                        } catch (SQLException ex) {\n                            ex.printStackTrace();\n                        }\n                    }\n                });\n\n                configItem.add(selectItem);\n                configItem.add(editItem);\n                configItem.add(deleteItem);\n                dropdownMenu.add(configItem);\n            }\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private List<String> getConfigLinesById(int id) {\n        try (Connection conn = DriverManager.getConnection(\"jdbc:sqlite:bdd.db\")) {\n            PreparedStatement ps = conn.prepareStatement(\"SELECT * FROM port_config WHERE id = ?\");\n            ps.setInt(1, id);\n            ResultSet rs = ps.executeQuery();\n            if (rs.next()) {\n                return List.of(\n                        \"baudrate=\" + rs.getInt(\"baudrate\"),\n                        \"parity=\" + rs.getString(\"parity\"),\n                        \"databits=\" + rs.getInt(\"databits\"),\n                        \"stopbits=\" + rs.getInt(\"stopbits\")\n                );\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return List.of();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/demo/ui/components/PortConfigSelectorPanel.java b/src/main/java/org/example/demo/ui/components/PortConfigSelectorPanel.java
--- a/src/main/java/org/example/demo/ui/components/PortConfigSelectorPanel.java	
+++ b/src/main/java/org/example/demo/ui/components/PortConfigSelectorPanel.java	
@@ -1,198 +1,515 @@
-// PortConfigSelectorPanel.java
 package org.example.demo.ui.components;
 
 import com.fazecast.jSerialComm.SerialPort;
 import org.example.demo.serial.SerialTransmitter;
 
 import javax.swing.*;
+import javax.swing.border.*;
 import java.awt.*;
+import java.awt.event.*;
 import java.sql.*;
 import java.util.List;
 import java.util.function.Consumer;
 
 public class PortConfigSelectorPanel extends JPanel {
-    private JButton dropdownButton;
+    // Couleurs coh√©rentes avec le reste de l'application
+    private static final Color BACKGROUND_COLOR = new Color(245, 245, 245);
+    private static final Color ACCENT_COLOR = new Color(78, 110, 142);
+    private static final Color SEND_BUTTON_COLOR = new Color(100, 180, 220);
+    private static final Color LISTEN_BUTTON_COLOR = new Color(100, 180, 100);
+    private static final Color LISTEN_ACTIVE_COLOR = new Color(220, 100, 100);
+
+    // Polices
+    private static final Font BUTTON_FONT = new Font("Segoe UI", Font.PLAIN, 13);
+    private static final Font MENU_FONT = new Font("Segoe UI", Font.PLAIN, 13);
+    private static final Font CONFIG_FONT = new Font("Segoe UI", Font.PLAIN, 13);
+
+    // Composants UI
+    private JButton configButton;
     private JButton sendButton;
     private JButton listenButton;
-    private JPopupMenu dropdownMenu;
+    private JPopupMenu configMenu;
+    private JComboBox<PortItem> portSelector;
+
+    // √âtat
     private int selectedConfigId = -1;
     private String selectedConfigLabel = "";
-    private JComboBox<String> portSelector;
-
     private boolean listening = false;
     private Thread listenThread;
 
+    // Callback
     private final Consumer<String> onTrameReceived;
+    private final Runnable onSendInit;
 
     public PortConfigSelectorPanel(Runnable onSendInit, Consumer<String> onTrameReceived) {
         this.onTrameReceived = onTrameReceived;
-        setLayout(new FlowLayout(FlowLayout.LEFT, 5, 0));
-        setBackground(Color.WHITE);
+        this.onSendInit = onSendInit;
+
+        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));
+        setBackground(BACKGROUND_COLOR);
+        setBorder(BorderFactory.createEmptyBorder(0, 0, 0, 0));
 
-        dropdownButton = new JButton("Configuration Port ‚ñº");
-        dropdownButton.setFocusPainted(false);
-        dropdownButton.setBackground(new Color(245, 245, 245));
-        dropdownButton.setBorder(BorderFactory.createCompoundBorder(
-                new RoundRectBorder(10),
-                BorderFactory.createEmptyBorder(5, 12, 5, 12)
-        ));
+        // Bouton de configuration avec style am√©lior√©
+        configButton = createConfigButton();
 
-        sendButton = new JButton("Envoyer la config");
-        sendButton.setFocusPainted(false);
-        sendButton.setBackground(new Color(220, 245, 255));
-        sendButton.setBorder(BorderFactory.createCompoundBorder(
-                new RoundRectBorder(10),
-                BorderFactory.createEmptyBorder(5, 10, 5, 10)
-        ));
+        // S√©lecteur de port avec style am√©lior√©
+        portSelector = createPortSelector();
 
-        listenButton = new JButton("‚ñ∂ √âcouter");
-        listenButton.setFocusPainted(false);
-        listenButton.setBackground(new Color(230, 250, 230));
-        listenButton.setBorder(BorderFactory.createCompoundBorder(
-                new RoundRectBorder(10),
-                BorderFactory.createEmptyBorder(5, 10, 5, 10)
-        ));
+        // Bouton d'envoi avec style am√©lior√©
+        sendButton = createSendButton();
 
-        portSelector = new JComboBox<>();
-        portSelector.setPreferredSize(new Dimension(120, 25));
+        // Bouton d'√©coute avec style am√©lior√©
+        listenButton = createListenButton();
+
+        // Menu d√©roulant pour les configurations
+        configMenu = createConfigMenu();
+
+        // Ajouter les composants au panel
+        add(configButton);
+        add(Box.createRigidArea(new Dimension(8, 0)));
+        add(portSelector);
+        add(Box.createRigidArea(new Dimension(8, 0)));
+        add(sendButton);
+        add(Box.createRigidArea(new Dimension(8, 0)));
+        add(listenButton);
+
+        // Charger les configurations
+        reloadConfigs();
+
+        // Rafra√Æchir les ports s√©rie
         refreshSerialPorts();
+    }
+
+    /**
+     * Cr√©e le bouton de configuration
+     */
+    private JButton createConfigButton() {
+        JButton button = new JButton("Configuration Port ‚ñº");
+        button.setFont(BUTTON_FONT);
+        button.setFocusPainted(false);
+        button.setBackground(BACKGROUND_COLOR);
+        button.setForeground(ACCENT_COLOR);
+        button.setBorder(BorderFactory.createCompoundBorder(
+                new RoundRectBorder(6, new Color(220, 220, 220)),
+                BorderFactory.createEmptyBorder(6, 12, 6, 12)
+        ));
+
+        // Ajouter des effets de survol
+        button.addMouseListener(new MouseAdapter() {
+            @Override
+            public void mouseEntered(MouseEvent e) {
+                button.setBackground(new Color(235, 235, 235));
+            }
+
+            @Override
+            public void mouseExited(MouseEvent e) {
+                button.setBackground(BACKGROUND_COLOR);
+            }
+        });
+
+        // Afficher le menu lors du clic
+        button.addActionListener(e -> configMenu.show(button, 0, button.getHeight()));
+
+        return button;
+    }
+
+    /**
+     * Cr√©e le s√©lecteur de port
+     */
+    private JComboBox<PortItem> createPortSelector() {
+        JComboBox<PortItem> selector = new JComboBox<>();
+        selector.setFont(CONFIG_FONT);
+        selector.setBackground(Color.WHITE);
+        selector.setPreferredSize(new Dimension(150, 32));
+        selector.setMaximumSize(new Dimension(150, 32));
+        selector.setBorder(BorderFactory.createCompoundBorder(
+                new RoundRectBorder(6, new Color(220, 220, 220)),
+                BorderFactory.createEmptyBorder(0, 5, 0, 5)
+        ));
+
+        // Ajouter un bouton de rafra√Æchissement
+        JButton refreshButton = new JButton("‚ü≥");
+        refreshButton.setFont(new Font("Segoe UI", Font.PLAIN, 14));
+        refreshButton.setFocusPainted(false);
+        refreshButton.setBorderPainted(false);
+        refreshButton.setContentAreaFilled(false);
+        refreshButton.setToolTipText("Rafra√Æchir la liste des ports");
+        refreshButton.addActionListener(e -> refreshSerialPorts());
+
+        // Ajouter le bouton de rafra√Æchissement au s√©lecteur
+        selector.setRenderer(new PortItemRenderer());
+
+        // Ajouter un panel pour contenir le s√©lecteur et le bouton
+        JPanel selectorPanel = new JPanel(new BorderLayout());
+        selectorPanel.add(selector, BorderLayout.CENTER);
+        selectorPanel.add(refreshButton, BorderLayout.EAST);
+
+        return selector;
+    }
+
+    /**
+     * Cr√©e le bouton d'envoi
+     */
+    private JButton createSendButton() {
+        JButton button = new JButton("Envoyer");
+        button.setFont(BUTTON_FONT);
+        button.setFocusPainted(false);
+        button.setBackground(SEND_BUTTON_COLOR);
+        button.setForeground(Color.WHITE);
+        button.setBorder(BorderFactory.createCompoundBorder(
+                new RoundRectBorder(6, SEND_BUTTON_COLOR),
+                BorderFactory.createEmptyBorder(6, 12, 6, 12)
+        ));
+
+        // Ajouter des effets de survol
+        button.addMouseListener(new MouseAdapter() {
+            @Override
+            public void mouseEntered(MouseEvent e) {
+                if (button.isEnabled()) {
+                    button.setBackground(SEND_BUTTON_COLOR.darker());
+                    button.setBorder(BorderFactory.createCompoundBorder(
+                            new RoundRectBorder(6, SEND_BUTTON_COLOR.darker()),
+                            BorderFactory.createEmptyBorder(6, 12, 6, 12)
+                    ));
+                }
+            }
+
+            @Override
+            public void mouseExited(MouseEvent e) {
+                if (button.isEnabled()) {
+                    button.setBackground(SEND_BUTTON_COLOR);
+                    button.setBorder(BorderFactory.createCompoundBorder(
+                            new RoundRectBorder(6, SEND_BUTTON_COLOR),
+                            BorderFactory.createEmptyBorder(6, 12, 6, 12)
+                    ));
+                }
+            }
+        });
+
+        // Ajouter l'action d'envoi
+        button.addActionListener(e -> sendConfiguration());
+        button.setToolTipText("Envoyer la configuration au port s√©lectionn√©");
+
+        return button;
+    }
+
+    /**
+     * Cr√©e le bouton d'√©coute
+     */
+    private JButton createListenButton() {
+        JButton button = new JButton("‚ñ∂ √âcouter");
+        button.setFont(BUTTON_FONT);
+        button.setFocusPainted(false);
+        button.setBackground(LISTEN_BUTTON_COLOR);
+        button.setForeground(Color.WHITE);
+        button.setBorder(BorderFactory.createCompoundBorder(
+                new RoundRectBorder(6, LISTEN_BUTTON_COLOR),
+                BorderFactory.createEmptyBorder(6, 12, 6, 12)
+        ));
 
-        dropdownMenu = new JPopupMenu();
-        dropdownMenu.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
+        // Ajouter des effets de survol
+        button.addMouseListener(new MouseAdapter() {
+            @Override
+            public void mouseEntered(MouseEvent e) {
+                if (button.isEnabled()) {
+                    Color currentColor = listening ? LISTEN_ACTIVE_COLOR : LISTEN_BUTTON_COLOR;
+                    button.setBackground(currentColor.darker());
+                    button.setBorder(BorderFactory.createCompoundBorder(
+                            new RoundRectBorder(6, currentColor.darker()),
+                            BorderFactory.createEmptyBorder(6, 12, 6, 12)
+                    ));
+                }
+            }
 
-        dropdownButton.addActionListener(e -> dropdownMenu.show(dropdownButton, 0, dropdownButton.getHeight()));
+            @Override
+            public void mouseExited(MouseEvent e) {
+                if (button.isEnabled()) {
+                    Color currentColor = listening ? LISTEN_ACTIVE_COLOR : LISTEN_BUTTON_COLOR;
+                    button.setBackground(currentColor);
+                    button.setBorder(BorderFactory.createCompoundBorder(
+                            new RoundRectBorder(6, currentColor),
+                            BorderFactory.createEmptyBorder(6, 12, 6, 12)
+                    ));
+                }
+            }
+        });
 
-        sendButton.addActionListener(e -> {
-            if (selectedConfigId == -1) {
-                JOptionPane.showMessageDialog(this, "Veuillez d'abord s√©lectionner une configuration.");
-                return;
-            }
-            String portName = (String) portSelector.getSelectedItem();
-            if (portName == null) {
-                JOptionPane.showMessageDialog(this, "Aucun port s√©rie s√©lectionn√©.");
-                return;
-            }
-            List<String> configLines = getConfigLinesById(selectedConfigId);
+        // Ajouter l'action d'√©coute
+        button.addActionListener(e -> toggleListening());
+        button.setToolTipText("D√©marrer/arr√™ter l'√©coute sur le port s√©lectionn√©");
+
+        return button;
+    }
+
+    /**
+     * Cr√©e le menu de configuration
+     */
+    private JPopupMenu createConfigMenu() {
+        JPopupMenu menu = new JPopupMenu();
+        menu.setBorder(BorderFactory.createCompoundBorder(
+                new LineBorder(new Color(220, 220, 220), 1),
+                new EmptyBorder(5, 0, 5, 0)
+        ));
+
+        return menu;
+    }
+
+    /**
+     * Envoie la configuration au port s√©lectionn√©
+     */
+    private void sendConfiguration() {
+        if (selectedConfigId == -1) {
+            showError("Veuillez d'abord s√©lectionner une configuration.");
+            return;
+        }
+
+        PortItem selectedPort = (PortItem) portSelector.getSelectedItem();
+        if (selectedPort == null) {
+            showError("Aucun port s√©rie s√©lectionn√©.");
+            return;
+        }
+
+        List<String> configLines = getConfigLinesById(selectedConfigId);
 
-            if (SerialTransmitter.isSimulationMode()) {
-                // Ne rien faire ici ‚Äî la simulation ne d√©marre que sur √©coute
-                JOptionPane.showMessageDialog(this, "Configuration simul√©e pr√™te. Appuyez sur ‚ñ∂ pour d√©marrer.");
-            } else {
-                SerialTransmitter.sendConfigOnly(portName, 115200, configLines);
+        if (SerialTransmitter.isSimulationMode()) {
+            showInfo("Configuration simul√©e pr√™te. Appuyez sur ‚ñ∂ pour d√©marrer.");
+        } else {
+            try {
+                SerialTransmitter.sendConfigOnly(selectedPort.getPortName(), 115200, configLines);
+                showSuccess("Configuration envoy√©e avec succ√®s.");
+                if (onSendInit != null) {
+                    onSendInit.run();
+                }
+            } catch (Exception ex) {
+                showError("Erreur lors de l'envoi de la configuration: " + ex.getMessage());
             }
-        });
-
-        listenButton.addActionListener(e -> toggleListening());
-
-        add(dropdownButton);
-        add(portSelector);
-        add(sendButton);
-        add(listenButton);
-        reloadConfigs();
+        }
     }
 
+    /**
+     * D√©marre ou arr√™te l'√©coute sur le port s√©lectionn√©
+     */
     private void toggleListening() {
         if (listening) {
             SerialTransmitter.stopListening();
             listening = false;
             listenButton.setText("‚ñ∂ √âcouter");
+            listenButton.setBackground(LISTEN_BUTTON_COLOR);
+            listenButton.setBorder(BorderFactory.createCompoundBorder(
+                    new RoundRectBorder(6, LISTEN_BUTTON_COLOR),
+                    BorderFactory.createEmptyBorder(6, 12, 6, 12)
+            ));
+            showInfo("√âcoute arr√™t√©e.");
         } else {
             if (selectedConfigId == -1) {
-                JOptionPane.showMessageDialog(this, "Veuillez d'abord s√©lectionner une configuration.");
+                showError("Veuillez d'abord s√©lectionner une configuration.");
                 return;
             }
-            String portName = (String) portSelector.getSelectedItem();
-            if (portName == null) {
-                JOptionPane.showMessageDialog(this, "Aucun port s√©rie s√©lectionn√©.");
+
+            PortItem selectedPort = (PortItem) portSelector.getSelectedItem();
+            if (selectedPort == null) {
+                showError("Aucun port s√©rie s√©lectionn√©.");
                 return;
             }
+
             List<String> configLines = getConfigLinesById(selectedConfigId);
             listening = true;
-            listenButton.setText("‚è∏ Pause");
-            listenThread = new Thread(() ->
-                    SerialTransmitter.sendConfigAndListen(portName, 115200, configLines, onTrameReceived, false)
-            );
+            listenButton.setText("‚èπ Arr√™ter");
+            listenButton.setBackground(LISTEN_ACTIVE_COLOR);
+            listenButton.setBorder(BorderFactory.createCompoundBorder(
+                    new RoundRectBorder(6, LISTEN_ACTIVE_COLOR),
+                    BorderFactory.createEmptyBorder(6, 12, 6, 12)
+            ));
+
+            listenThread = new Thread(() -> {
+                try {
+                    SerialTransmitter.sendConfigAndListen(
+                            selectedPort.getPortName(), 115200, configLines, onTrameReceived, false
+                    );
+                } catch (Exception ex) {
+                    SwingUtilities.invokeLater(() -> {
+                        showError("Erreur lors de l'√©coute: " + ex.getMessage());
+                        toggleListening(); // Arr√™ter l'√©coute en cas d'erreur
+                    });
+                }
+            });
             listenThread.start();
+            showSuccess("√âcoute d√©marr√©e sur " + selectedPort.getPortName());
         }
     }
 
+    /**
+     * Rafra√Æchit la liste des ports s√©rie disponibles
+     */
     private void refreshSerialPorts() {
         portSelector.removeAllItems();
-        for (SerialPort port : SerialPort.getCommPorts()) {
-            portSelector.addItem(port.getSystemPortName());
+
+        SerialPort[] ports = SerialPort.getCommPorts();
+        if (ports.length == 0) {
+            portSelector.addItem(new PortItem("Aucun port", ""));
+            portSelector.setEnabled(false);
+            sendButton.setEnabled(false);
+            listenButton.setEnabled(false);
+        } else {
+            portSelector.setEnabled(true);
+            sendButton.setEnabled(true);
+            listenButton.setEnabled(true);
+
+            for (SerialPort port : ports) {
+                String name = port.getSystemPortName();
+                String description = port.getDescriptivePortName();
+                portSelector.addItem(new PortItem(name, description));
+            }
         }
     }
 
+    /**
+     * Recharge les configurations depuis la base de donn√©es
+     */
     public void reloadConfigs() {
-        dropdownMenu.removeAll();
+        configMenu.removeAll();
 
         try (Connection conn = DriverManager.getConnection("jdbc:sqlite:bdd.db")) {
-            String query = "SELECT * FROM port_config";
+            String query = "SELECT * FROM port_config ORDER BY id";
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(query);
 
+            boolean hasConfigs = false;
+
             while (rs.next()) {
+                hasConfigs = true;
                 int id = rs.getInt("id");
                 int baudrate = rs.getInt("baudrate");
                 String parity = rs.getString("parity");
                 int databits = rs.getInt("databits");
                 int stopbits = rs.getInt("stopbits");
 
-                String label = String.format("Config %d : %d - %s - %d/%d", id, baudrate, parity, databits, stopbits);
+                String label = String.format("Config %d : %d - %s - %d/%d",
+                        id, baudrate, parity, databits, stopbits);
+
+                JPanel configPanel = new JPanel();
+                configPanel.setLayout(new BorderLayout());
+                configPanel.setBackground(Color.WHITE);
 
-                JMenu configItem = new JMenu(label);
-                configItem.setFont(new Font("SansSerif", Font.PLAIN, 13));
-                configItem.setIcon(null);
+                JLabel configLabel = new JLabel(label);
+                configLabel.setFont(CONFIG_FONT);
+                configLabel.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
+                configPanel.add(configLabel, BorderLayout.CENTER);
 
-                JMenuItem selectItem = new JMenuItem("‚úÖ S√©lectionner");
-                selectItem.setIcon(null);
-                selectItem.addActionListener(e -> {
+                JPanel buttonsPanel = new JPanel();
+                buttonsPanel.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 0));
+                buttonsPanel.setBackground(Color.WHITE);
+
+                // Bouton de s√©lection
+                JButton selectButton = createMenuButton("‚úì", "S√©lectionner cette configuration");
+                selectButton.addActionListener(e -> {
                     selectedConfigId = id;
                     selectedConfigLabel = label;
-                    dropdownButton.setText(label + " ‚ñº");
-                    System.out.println("S√©lectionn√© : " + label);
+                    configButton.setText(String.format("Config %d ‚ñº", id));
+                    configMenu.setVisible(false);
                 });
 
-                JMenuItem editItem = new JMenuItem("‚úèÔ∏è Modifier");
-                editItem.setIcon(null);
-                editItem.addActionListener(e -> {
+                // Bouton d'√©dition
+                JButton editButton = createMenuButton("‚úé", "Modifier cette configuration");
+                editButton.addActionListener(e -> {
                     JFrame parent = (JFrame) SwingUtilities.getWindowAncestor(this);
                     new org.example.demo.ui.dialogs.EditPortConfigDialog(parent, id).setVisible(true);
                     reloadConfigs();
+                    configMenu.setVisible(false);
                 });
 
-                JMenuItem deleteItem = new JMenuItem("üóëÔ∏è Supprimer");
-                deleteItem.setIcon(null);
-                deleteItem.addActionListener(e -> {
+                // Bouton de suppression
+                JButton deleteButton = createMenuButton("üóë", "Supprimer cette configuration");
+                deleteButton.addActionListener(e -> {
                     int confirm = JOptionPane.showConfirmDialog(this,
-                            "Supprimer cette configuration ?", "Confirmation", JOptionPane.YES_NO_OPTION);
+                            "Supprimer cette configuration ?", "Confirmation",
+                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
+
                     if (confirm == JOptionPane.YES_OPTION) {
                         try (PreparedStatement ps = conn.prepareStatement("DELETE FROM port_config WHERE id = ?")) {
                             ps.setInt(1, id);
                             ps.executeUpdate();
+
+                            // R√©initialiser la s√©lection si la configuration supprim√©e √©tait s√©lectionn√©e
+                            if (selectedConfigId == id) {
+                                selectedConfigId = -1;
+                                selectedConfigLabel = "";
+                                configButton.setText("Configuration Port ‚ñº");
+                            }
+
                             reloadConfigs();
                         } catch (SQLException ex) {
-                            ex.printStackTrace();
+                            showError("Erreur lors de la suppression: " + ex.getMessage());
                         }
                     }
+                    configMenu.setVisible(false);
                 });
 
-                configItem.add(selectItem);
-                configItem.add(editItem);
-                configItem.add(deleteItem);
-                dropdownMenu.add(configItem);
+                buttonsPanel.add(selectButton);
+                buttonsPanel.add(editButton);
+                buttonsPanel.add(deleteButton);
+                configPanel.add(buttonsPanel, BorderLayout.EAST);
+
+                // Ajouter un s√©parateur pour chaque √©l√©ment sauf le dernier
+                configMenu.add(configPanel);
+                configMenu.add(new JSeparator());
+            }
+
+            // Ajouter un √©l√©ment pour cr√©er une nouvelle configuration
+            JPanel newConfigPanel = new JPanel(new BorderLayout());
+            newConfigPanel.setBackground(Color.WHITE);
+
+            JLabel newConfigLabel = new JLabel("Ajouter une nouvelle configuration");
+            newConfigLabel.setFont(CONFIG_FONT);
+            newConfigLabel.setForeground(ACCENT_COLOR);
+            newConfigLabel.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
+
+            newConfigPanel.add(newConfigLabel, BorderLayout.CENTER);
+            newConfigPanel.addMouseListener(new MouseAdapter() {
+                @Override
+                public void mouseEntered(MouseEvent e) {
+                    newConfigPanel.setBackground(new Color(240, 240, 240));
+                }
+
+                @Override
+                public void mouseExited(MouseEvent e) {
+                    newConfigPanel.setBackground(Color.WHITE);
+                }
+
+                @Override
+                public void mouseClicked(MouseEvent e) {
+                    JFrame parent = (JFrame) SwingUtilities.getWindowAncestor(PortConfigSelectorPanel.this);
+                    new org.example.demo.ui.dialogs.AddPortConfigDialog(parent).setVisible(true);
+                    reloadConfigs();
+                    configMenu.setVisible(false);
+                }
+            });
+
+            configMenu.add(newConfigPanel);
+
+            // Si aucune configuration n'est trouv√©e
+            if (!hasConfigs) {
+                JLabel noConfigLabel = new JLabel("Aucune configuration trouv√©e");
+                noConfigLabel.setFont(CONFIG_FONT);
+                noConfigLabel.setBorder(BorderFactory.createEmptyBorder(5, 10, 5, 10));
+                configMenu.add(noConfigLabel, 0);
+                configMenu.add(new JSeparator(), 1);
             }
 
         } catch (SQLException e) {
-            e.printStackTrace();
+            showError("Erreur de base de donn√©es: " + e.getMessage());
         }
     }
 
+    /**
+     * R√©cup√®re les lignes de configuration par ID
+     */
     private List<String> getConfigLinesById(int id) {
         try (Connection conn = DriverManager.getConnection("jdbc:sqlite:bdd.db")) {
             PreparedStatement ps = conn.prepareStatement("SELECT * FROM port_config WHERE id = ?");
             ps.setInt(1, id);
             ResultSet rs = ps.executeQuery();
+
             if (rs.next()) {
                 return List.of(
                         "baudrate=" + rs.getInt("baudrate"),
@@ -202,8 +519,94 @@
                 );
             }
         } catch (SQLException e) {
-            e.printStackTrace();
+            showError("Erreur lors de la r√©cup√©ration de la configuration: " + e.getMessage());
         }
+
         return List.of();
     }
+
+    /**
+     * Cr√©e un bouton pour le menu
+     */
+    private JButton createMenuButton(String text, String tooltip) {
+        JButton button = new JButton(text);
+        button.setFont(new Font("Segoe UI", Font.PLAIN, 12));
+        button.setFocusPainted(false);
+        button.setBorderPainted(false);
+        button.setContentAreaFilled(false);
+        button.setToolTipText(tooltip);
+        button.setPreferredSize(new Dimension(30, 25));
+        button.setMargin(new Insets(0, 0, 0, 0));
+
+        return button;
+    }
+
+    /**
+     * Affiche un message d'erreur
+     */
+    private void showError(String message) {
+        JOptionPane.showMessageDialog(this, message, "Erreur", JOptionPane.ERROR_MESSAGE);
+    }
+
+    /**
+     * Affiche un message d'information
+     */
+    private void showInfo(String message) {
+        JOptionPane.showMessageDialog(this, message, "Information", JOptionPane.INFORMATION_MESSAGE);
+    }
+
+    /**
+     * Affiche un message de succ√®s
+     */
+    private void showSuccess(String message) {
+        JOptionPane.showMessageDialog(this, message, "Succ√®s", JOptionPane.INFORMATION_MESSAGE);
+    }
+
+    /**
+     * Classe pour repr√©senter un √©l√©ment de port dans le s√©lecteur
+     */
+    private static class PortItem {
+        private final String portName;
+        private final String description;
+
+        public PortItem(String portName, String description) {
+            this.portName = portName;
+            this.description = description;
+        }
+
+        public String getPortName() {
+            return portName;
+        }
+
+        public String getDescription() {
+            return description;
+        }
+
+        @Override
+        public String toString() {
+            return portName;
+        }
+    }
+
+    /**
+     * Renderer personnalis√© pour les √©l√©ments de port
+     */
+    private static class PortItemRenderer extends DefaultListCellRenderer {
+        @Override
+        public Component getListCellRendererComponent(JList<?> list, Object value,
+                                                      int index, boolean isSelected, boolean cellHasFocus) {
+
+            JLabel label = (JLabel) super.getListCellRendererComponent(
+                    list, value, index, isSelected, cellHasFocus);
+
+            if (value instanceof PortItem) {
+                PortItem item = (PortItem) value;
+                if (!item.getDescription().isEmpty()) {
+                    label.setToolTipText(item.getDescription());
+                }
+            }
+
+            return label;
+        }
+    }
 }
\ No newline at end of file
Index: src/main/java/org/example/demo/ui/MainContentPanel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.demo.ui;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport org.example.demo.ui.views.GraphViewPanel;\nimport org.example.demo.ui.views.MessageViewPanel;\n\npublic class MainContentPanel extends JPanel {\n    private JTextArea hexArea;\n    private JPanel rightPanel;\n    private CardLayout cardLayout;\n\n    public MainContentPanel() {\n        setLayout(new BorderLayout());\n\n        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);\n\n        // Zone des codes hexad√©cimaux\n        hexArea = new JTextArea();\n        hexArea.setFont(new Font(\"Monospaced\", Font.PLAIN, 12));\n        hexArea.setText(getInitialHexCodes());\n        hexArea.setEditable(false);\n        JScrollPane leftScrollPane = new JScrollPane(hexArea);\n\n        // Vue droite\n        cardLayout = new CardLayout();\n        rightPanel = new JPanel(cardLayout);\n\n        MessageViewPanel messageView = new MessageViewPanel();\n        GraphViewPanel graphView = new GraphViewPanel();\n\n        rightPanel.add(messageView, \"MESSAGE\");\n        rightPanel.add(graphView, \"GRAPH\");\n\n        splitPane.setLeftComponent(leftScrollPane);\n        splitPane.setRightComponent(rightPanel);\n        splitPane.setDividerLocation(400);\n\n        add(splitPane, BorderLayout.CENTER);\n    }\n\n    private String getInitialHexCodes() {\n        return \"7E 02 1A 01 0B 2D 5F 10 15 7E\\n\" +\n                \"7E 05 1A 00 14 FF 7E\\n\" +\n                \"7E 08 1A 01 04 01 00 25 7E\\n\" +\n                \"7E 10 1A 03 00 02 7E\\n\" +\n                \"7E 02 1B 01 0C 2E 60 12 18 7E\\n\" +\n                \"7E 05 1B 01 10 00 7E\\n\" +\n                \"7E 08 1B 00 03 03 01 2F 7E\\n\" +\n                \"7E 10 1B 03 00 03 7E\\n\" +\n                \"7E 02 1C 01 0D 2F 61 13 20 7E\\n\" +\n                \"7E 05 1C 00 12 FF 7E\\n\" +\n                \"7E 08 1C 01 04 02 00 20 7E\\n\" +\n                \"7E 10 1C 03 00 01 7E\";\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/demo/ui/MainContentPanel.java b/src/main/java/org/example/demo/ui/MainContentPanel.java
--- a/src/main/java/org/example/demo/ui/MainContentPanel.java	
+++ b/src/main/java/org/example/demo/ui/MainContentPanel.java	
@@ -1,30 +1,80 @@
 package org.example.demo.ui;
 
 import javax.swing.*;
+import javax.swing.border.*;
 import java.awt.*;
+import java.awt.event.*;
 import org.example.demo.ui.views.GraphViewPanel;
 import org.example.demo.ui.views.MessageViewPanel;
+import javax.swing.text.DefaultHighlighter;
 
 public class MainContentPanel extends JPanel {
     private JTextArea hexArea;
     private JPanel rightPanel;
     private CardLayout cardLayout;
+    private JToggleButton messageViewButton;
+    private JToggleButton graphViewButton;
+    private static final Color BACKGROUND_COLOR = new Color(245, 245, 245);
+    private static final Color HEADER_COLOR = new Color(60, 63, 65);
+    private static final Color ACCENT_COLOR = new Color(78, 110, 142);
+    private static final Font HEADER_FONT = new Font("Segoe UI", Font.BOLD, 14);
+    private static final Font CONTENT_FONT = new Font("Consolas", Font.PLAIN, 13);
 
     public MainContentPanel() {
-        setLayout(new BorderLayout());
+        setLayout(new BorderLayout(5, 5));
+        setBackground(BACKGROUND_COLOR);
+        setBorder(new EmptyBorder(10, 10, 10, 10));
 
+        // Header panel with view toggle buttons
+        JPanel headerPanel = createHeaderPanel();
+        add(headerPanel, BorderLayout.NORTH);
+
+        // Main content with split pane
         JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
+        splitPane.setDividerSize(5);
+        splitPane.setBorder(null);
+        splitPane.setBackground(BACKGROUND_COLOR);
+        splitPane.setContinuousLayout(true);
+
+        // Left panel - Hex codes with header
+        JPanel leftPanel = new JPanel(new BorderLayout(0, 5));
+        leftPanel.setBackground(BACKGROUND_COLOR);
+        leftPanel.setBorder(new EmptyBorder(5, 0, 0, 5));
 
-        // Zone des codes hexad√©cimaux
+        JLabel hexLabel = new JLabel("Hex Codes");
+        hexLabel.setFont(HEADER_FONT);
+        hexLabel.setForeground(HEADER_COLOR);
+        hexLabel.setBorder(new EmptyBorder(0, 5, 5, 0));
+        leftPanel.add(hexLabel, BorderLayout.NORTH);
+
+        // Hex area with improved styling
         hexArea = new JTextArea();
-        hexArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
+        hexArea.setFont(CONTENT_FONT);
         hexArea.setText(getInitialHexCodes());
         hexArea.setEditable(false);
+        hexArea.setBackground(Color.WHITE);
+        hexArea.setBorder(new EmptyBorder(5, 5, 5, 5));
+        hexArea.setLineWrap(true);
+
         JScrollPane leftScrollPane = new JScrollPane(hexArea);
+        leftScrollPane.setBorder(new CompoundBorder(
+                new LineBorder(new Color(220, 220, 220), 1),
+                new EmptyBorder(2, 2, 2, 2)
+        ));
+        leftPanel.add(leftScrollPane, BorderLayout.CENTER);
 
-        // Vue droite
+        // Add search functionality
+        JPanel searchPanel = createSearchPanel();
+        leftPanel.add(searchPanel, BorderLayout.SOUTH);
+
+        // Right panel with card layout
         cardLayout = new CardLayout();
         rightPanel = new JPanel(cardLayout);
+        rightPanel.setBorder(new CompoundBorder(
+                new LineBorder(new Color(220, 220, 220), 1),
+                new EmptyBorder(5, 5, 5, 5)
+        ));
+        rightPanel.setBackground(Color.WHITE);
 
         MessageViewPanel messageView = new MessageViewPanel();
         GraphViewPanel graphView = new GraphViewPanel();
@@ -32,11 +82,123 @@
         rightPanel.add(messageView, "MESSAGE");
         rightPanel.add(graphView, "GRAPH");
 
-        splitPane.setLeftComponent(leftScrollPane);
+        splitPane.setLeftComponent(leftPanel);
         splitPane.setRightComponent(rightPanel);
         splitPane.setDividerLocation(400);
 
         add(splitPane, BorderLayout.CENTER);
+
+        // Status bar
+        JPanel statusBar = createStatusBar();
+        add(statusBar, BorderLayout.SOUTH);
+    }
+
+    private JPanel createHeaderPanel() {
+        JPanel headerPanel = new JPanel();
+        headerPanel.setLayout(new BorderLayout());
+        headerPanel.setBackground(BACKGROUND_COLOR);
+        headerPanel.setBorder(new EmptyBorder(0, 0, 10, 0));
+
+        // Title
+        JLabel titleLabel = new JLabel("Data Analyzer");
+        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 16));
+        titleLabel.setForeground(HEADER_COLOR);
+        headerPanel.add(titleLabel, BorderLayout.WEST);
+
+        // View toggle buttons
+        JPanel viewTogglePanel = new JPanel();
+        viewTogglePanel.setBackground(BACKGROUND_COLOR);
+        viewTogglePanel.setLayout(new FlowLayout(FlowLayout.RIGHT));
+
+        ButtonGroup viewGroup = new ButtonGroup();
+
+        messageViewButton = new JToggleButton("Message View");
+        messageViewButton.setFont(new Font("Segoe UI", Font.PLAIN, 12));
+        messageViewButton.setSelected(true);
+        messageViewButton.setFocusPainted(false);
+        messageViewButton.addActionListener(e -> cardLayout.show(rightPanel, "MESSAGE"));
+
+        graphViewButton = new JToggleButton("Graph View");
+        graphViewButton.setFont(new Font("Segoe UI", Font.PLAIN, 12));
+        graphViewButton.setFocusPainted(false);
+        graphViewButton.addActionListener(e -> cardLayout.show(rightPanel, "GRAPH"));
+
+        viewGroup.add(messageViewButton);
+        viewGroup.add(graphViewButton);
+
+        viewTogglePanel.add(messageViewButton);
+        viewTogglePanel.add(graphViewButton);
+
+        headerPanel.add(viewTogglePanel, BorderLayout.EAST);
+
+        return headerPanel;
+    }
+
+    private JPanel createSearchPanel() {
+        JPanel searchPanel = new JPanel(new BorderLayout(5, 0));
+        searchPanel.setBackground(BACKGROUND_COLOR);
+        searchPanel.setBorder(new EmptyBorder(5, 0, 0, 0));
+
+        JTextField searchField = new JTextField();
+        searchField.setBorder(new CompoundBorder(
+                new LineBorder(new Color(200, 200, 200), 1),
+                new EmptyBorder(5, 5, 5, 5)
+        ));
+        searchField.setFont(new Font("Segoe UI", Font.PLAIN, 12));
+
+        JButton searchButton = new JButton("Search");
+        searchButton.setFont(new Font("Segoe UI", Font.PLAIN, 12));
+        searchButton.setFocusPainted(false);
+        searchButton.addActionListener(e -> searchHexCodes(searchField.getText()));
+
+        searchPanel.add(searchField, BorderLayout.CENTER);
+        searchPanel.add(searchButton, BorderLayout.EAST);
+
+        return searchPanel;
+    }
+
+    private JPanel createStatusBar() {
+        JPanel statusBar = new JPanel(new BorderLayout());
+        statusBar.setBorder(new CompoundBorder(
+                new MatteBorder(1, 0, 0, 0, new Color(220, 220, 220)),
+                new EmptyBorder(5, 10, 5, 10)
+        ));
+        statusBar.setBackground(BACKGROUND_COLOR);
+
+        JLabel statusLabel = new JLabel("Ready");
+        statusLabel.setFont(new Font("Segoe UI", Font.PLAIN, 12));
+        statusLabel.setForeground(new Color(100, 100, 100));
+
+        statusBar.add(statusLabel, BorderLayout.WEST);
+
+        return statusBar;
+    }
+
+    private void searchHexCodes(String searchText) {
+        if (searchText == null || searchText.isEmpty()) {
+            return;
+        }
+
+        String content = hexArea.getText();
+        hexArea.requestFocusInWindow();
+
+        // Reset any previous highlights
+        hexArea.getHighlighter().removeAllHighlights();
+
+        try {
+            // Simple search implementation
+            int index = content.indexOf(searchText);
+            if (index >= 0) {
+                hexArea.setCaretPosition(index);
+                hexArea.getHighlighter().addHighlight(
+                        index,
+                        index + searchText.length(),
+                        new DefaultHighlighter.DefaultHighlightPainter(new Color(255, 255, 0, 128))
+                );
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
     }
 
     private String getInitialHexCodes() {
@@ -53,4 +215,4 @@
                 "7E 08 1C 01 04 02 00 20 7E\n" +
                 "7E 10 1C 03 00 01 7E";
     }
-}
+}
\ No newline at end of file
